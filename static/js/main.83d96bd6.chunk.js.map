{"version":3,"sources":["logo.svg","components/PostWall.js","actions/postActions.js","actions/types.js","components/PostForm.js","reducers/postReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PostWall","this","props","fetchPosts","nextProp","newPost","posts","unshift","className","style","color","map","data","key","id","paddingTop","textAlign","margin","width","listStyle","title","padding","body","React","Component","PropTypes","func","isRequired","array","object","connect","state","post","items","item","dispatch","fetch","then","json","type","payload","PostForm","handleOnChange","bind","handleSubmit","e","setState","target","name","value","preventDefault","console","log","createPost","onSubmit","onChange","postData","method","headers","JSON","stringify","res","initialState","postReducer","action","rootReducer","combineReducers","middleware","thunk","store","createStore","applyMiddleware","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.83d96bd6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\nimport './PostWall.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { fetchPosts } from '../actions/postActions'\r\n\r\nclass PostWall extends React.Component{\r\n    \r\n    componentDidMount(){\r\n        this.props.fetchPosts();\r\n    }\r\n\r\n    componentWillReceiveProps(nextProp){\r\n        if(nextProp.newPost){\r\n            this.props.posts.unshift(nextProp.newPost)\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className='postwall'>\r\n    \r\n                <h1 style={{color:'white'}}>POST</h1>\r\n                \r\n                {this.props.posts.map(data =>\r\n                        <div  key={data.id} style={{paddingTop:'20px',textAlign:'left',margin:'auto',width:'80%'}}>\r\n                        <ul>\r\n                            <li style={{listStyle:'none'}}>\r\n                                <h3>{data.title}</h3>\r\n                                <p style={{width:'70%',padding:'10px 0 10px 10px'}}>{data.body+'.'}</p>\r\n                            </li>\r\n                        </ul>\r\n                        <hr/>\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nPostWall.props = {\r\n    fetchPosts: PropTypes.func.isRequired,\r\n    posts: PropTypes.array.isRequired,\r\n    newPost: PropTypes.object\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    posts:state.post.items,\r\n    newPost:state.post.item\r\n})\r\n//state.(name_of_payload).item\r\n\r\n\r\nexport default connect(mapStateToProps,{fetchPosts})(PostWall);\r\n\r\n// connect  (mapStateToProps,mapDispatchToProps)  (Component)\r\n//          state->props    action from component   component","import { FETCH_POSTS, NEW_POST } from './types';\r\n\r\nexport const fetchPosts=() => dispatch =>{\r\n\r\n    fetch('https://jsonplaceholder.typicode.com/posts')\r\n    .then(data=>data.json())  //parsed using data.json()\r\n    .then(posts=> dispatch({\r\n        type: FETCH_POSTS,\r\n        payload:posts\r\n    }))\r\n};\r\n\r\n\r\nexport const createPost= (postData) => dispatch =>{\r\n\r\n    console.log('from Reducer')\r\n\r\n    fetch('https://jsonplaceholder.typicode.com/posts',{\r\n        method:'POST',\r\n        headers:{'Content-Type':'application/json'},\r\n        body:JSON.stringify(postData)\r\n    })\r\n    .then(res=>res.json())  //parsed using data.json()\r\n    .then(post=> dispatch({\r\n        type: NEW_POST,\r\n        payload:post\r\n    }))\r\n};\r\n","export const FETCH_POSTS = 'FETCH_POST'; // action fetch data from API \r\nexport const NEW_POST = 'NEW_POST'; // action to post new data from form","import React from 'react';\r\nimport './PostWall.css';\r\nimport { connect } from 'react-redux';\r\nimport { createPost } from '../actions/postActions';\r\nimport PropTypes from 'prop-types'\r\n\r\nclass PostForm extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            title:'',\r\n            body:''\r\n        }\r\n        this.handleOnChange=this.handleOnChange.bind(this)\r\n        this.handleSubmit=this.handleSubmit.bind(this)\r\n    }\r\n\r\n    handleOnChange(e){\r\n        this.setState({[e.target.name]:e.target.value});  \r\n    }\r\n\r\n    handleSubmit(e){\r\n        e.preventDefault()\r\n        console.log('from component PostForm '+this.state.title+'\\n'+this.state.body)\r\n        \r\n        const post = {\r\n            title:this.state.title,\r\n            body:this.state.body\r\n        }\r\n\r\n        this.props.createPost(post)\r\n    \r\n        this.setState({title:'',body:''})\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div >\r\n                <form onSubmit={this.handleSubmit} >\r\n                \r\n                    <div className='label'><h3>Title</h3></div>\r\n                    <div className='input'><input name='title' onChange={this.handleOnChange} value={this.state.title}/></div>\r\n                    \r\n                    <br/>\r\n                    \r\n                    <div className='label'><h3>Body</h3></div> \r\n                    <div className='textarea'><textarea name='body' onChange={this.handleOnChange} value={this.state.body}/><br/></div>\r\n                    \r\n                    <button type='submit'><b>Post</b></button><br/>\r\n                \r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nPostForm.propTypes = {\r\n    createPost: PropTypes.func.isRequired\r\n}\r\n\r\nexport default connect(null,{ createPost })(PostForm);","//reducer = (state,action)=>{}\r\n//reducer-> returns state\r\n\r\nimport {FETCH_POSTS,NEW_POST} from '../actions/types';\r\n\r\nconst initialState = {\r\n    items: [],\r\n    item: ''\r\n}\r\n\r\nconst postReducer = (state = initialState,action) => {\r\n    switch(action.type){\r\n        case FETCH_POSTS:\r\n            return {\r\n                ...state,\r\n                items:action.payload\r\n            };\r\n        case NEW_POST:\r\n            return{\r\n                ...state,\r\n                item:action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default postReducer;","import { combineReducers } from 'redux';\r\nimport postReducer from './postReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    post: postReducer\r\n});\r\n\r\nexport default rootReducer;","import { createStore,applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/index'\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(rootReducer,initialState,applyMiddleware(...middleware));\r\n\r\nexport default store;\r\n\r\n// redux thunk-> for writing action creators that returns 'function'  ,  instead of just plain actions\r\n//applyMiddleware -> for providing a way to interact with actions that have been dispatched to the store before they reach the store's reducer\r\n//uses of middle ware -> logging actions, reporting errors, making asynchronous requests, and dispatching new actions.","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {Provider} from 'react-redux';\n\nimport PostWall from './components/PostWall';\nimport PostForm from './components/PostForm';\nimport store from './store';\n\nclass App extends React.Component {\n\n  render(){\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <h2>The React Redux App</h2>\n          </header>\n          <PostForm/>\n          <PostWall/>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}